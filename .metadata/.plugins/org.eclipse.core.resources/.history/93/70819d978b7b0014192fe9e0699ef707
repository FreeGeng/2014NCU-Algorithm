import java.util.Arrays;
import java.util.Scanner;

public class Main {
	public static int num = 0; // 累計方案總數
	public static int MAXQUEEN;// 皇后個數
	public static int[] cols; //
	static Scanner scanner = new Scanner(System.in);
	static String temp[];
	static int score[][];
	static int total;
	static int max;

	public Main() {
		// 核心函数
		getArrangement(0);
		System.out.println(max);
	}

	public void getArrangement(int n) {
		// 遍歷該列所有不合法的行，並用rows數組記錄，不合法即rows[i]=true
		boolean[] rows = new boolean[MAXQUEEN];
		for (int i = 0; i < n; i++) {
			rows[cols[i]] = true;
			int d = n - i;
			if (cols[i] - d >= 0)
				rows[cols[i] - d] = true;
			if (cols[i] + d <= MAXQUEEN - 1)
				rows[cols[i] + d] = true;

		}
		for (int i = 0; i < MAXQUEEN; i++) {
			// 判斷是否合法
			if (rows[i])
				continue;
			// 當前列合法棋子所在個數
			cols[n] = i;
			// 當前列不為最後一列時
			if (n < MAXQUEEN - 1) {
				getArrangement(n + 1);
			} else {

				// 累計個數
				num++;

				printChessBoard();
			}

		}

	}

	public void printChessBoard() {

		// System.out.print("第" + num + "種走法 \n");

		for (int i = 0; i < MAXQUEEN; i++) {
			for (int j = 0; j < MAXQUEEN; j++) {
				if (i == cols[j]) {
					// System.out.print("0 ");
					total = total + score[i][j];

				} // else
					// System.out.print("+ ");
			}
			// System.out.printf("\n");
		}
		if (max < total) {
			max = total;
		}
		total = 0;

	}

	public static void main(String args[]) {
		while (scanner.hasNext()) {
			temp = scanner.nextLine().split(" ");
			if (!temp[0].equals("0")) {
				MAXQUEEN = Integer.parseInt(temp[0]);
				score = new int[MAXQUEEN][MAXQUEEN];
				for (int i = 0; i < MAXQUEEN; i++) {
					String temp1[] = scanner.nextLine().split(" ");
					for (int j = 0; j < MAXQUEEN; j++) {
						score[i][j] = Integer.parseInt(temp1[j]);
					}
				}
				cols = new int[MAXQUEEN];
				Main queen = new Main();

			} else {
				System.exit(0);
			}
		}
	}
}

/*
 * 8 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28
 * 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 48 50 51 52 53 54
 * 55 56 57 58 59 60 61 62 63 64
 */